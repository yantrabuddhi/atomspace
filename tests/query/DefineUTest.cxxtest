/*
 * tests/query/DefineLinkUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class DefineLinkUTest: public CxxTest::TestSuite
{
private:
        AtomSpace *as;
        SchemeEval* eval;

public:
    DefineLinkUTest(void)
    {
        logger().setLevel(Logger::DEBUG);
        logger().setPrintToStdoutFlag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
    }

    ~DefineLinkUTest()
    {
        delete eval;
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().getFilename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_basic(void);
    void test_schema(void);
};

void DefineLinkUTest::tearDown(void)
{
    as->clear();
}

void DefineLinkUTest::setUp(void)
{
    as->clear();
    config().set("SCM_PRELOAD",
        "opencog/atomspace/core_types.scm, "
        "opencog/scm/utilities.scm, "
        "opencog/scm/opencog/query.scm");

    load_scm_files_from_config(*as);
}

/*
 * DefineLink most basic unit test.
 */
void DefineLinkUTest::test_basic(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/define.scm");
    load_scm_files_from_config(*as);

    Handle items = eval->eval_h("(cog-execute! get-elect)");
    TS_ASSERT_EQUALS(2, as->get_arity(items));

    items = eval->eval_h("(cog-execute! get-elect-bound)");
    TS_ASSERT_EQUALS(2, as->get_arity(items));

    items = eval->eval_h("(cog-execute! get-parts)");
    TS_ASSERT_EQUALS(2, as->get_arity(items));
}

/*
 * DefineLink DefinedSchemaNode
 * Should be able to execute defined schemas.
 */
void DefineLinkUTest::test_schema(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/define-schema.scm");
    load_scm_files_from_config(*as);

    Handle timestamp = eval->eval_h(
        "(cog-execute! (DefinedSchemaNode \"set timestamp\"))");
    TS_ASSERT_EQUALS(2, as->get_arity(timestamp));

    // Executing the above should return something like this:
    // (EvaluationLink
    //     (PredicateNode "start-interaction-timestamp")
    //     (ListLink
    //         (NumberNode "1442342173.000000")))
    // We need to check explicitly for the NumberNode, as a bogus
    // return would provide a VariableNode instead, and that would
    // be wrong.

    LinkPtr lp = LinkCast(timestamp);
    Handle pred = lp->getOutgoingAtom(0);
    TS_ASSERT_EQUALS(PREDICATE_NODE, pred->getType());

    Handle list = lp->getOutgoingAtom(1);
    TS_ASSERT_EQUALS(LIST_LINK, list->getType());

    LinkPtr ll = LinkCast(list);
    Handle num = ll->getOutgoingAtom(0);
    TS_ASSERT_EQUALS(NUMBER_NODE, num->getType());
}
